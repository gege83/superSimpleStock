// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gergo.takacs.stock.dataprovider;

import com.gergo.takacs.stock.dataprovider.CommonStockEntity;
import com.gergo.takacs.stock.dataprovider.PreferredStockEntityServiceImpl;
import com.gergo.takacs.stock.dataprovider.PreferredStockRepository;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PreferredStockEntityServiceImpl_Roo_Service {
    
    declare @type: PreferredStockEntityServiceImpl: @Service;
    
    declare @type: PreferredStockEntityServiceImpl: @Transactional;
    
    @Autowired
    PreferredStockRepository PreferredStockEntityServiceImpl.preferredStockRepository;
    
    public long PreferredStockEntityServiceImpl.countAllCommonStockEntitys() {
        return preferredStockRepository.count();
    }
    
    public void PreferredStockEntityServiceImpl.deleteCommonStockEntity(CommonStockEntity commonStockEntity) {
        preferredStockRepository.delete(commonStockEntity);
    }
    
    public CommonStockEntity PreferredStockEntityServiceImpl.findCommonStockEntity(Long id) {
        return preferredStockRepository.findOne(id);
    }
    
    public List<CommonStockEntity> PreferredStockEntityServiceImpl.findAllCommonStockEntitys() {
        return preferredStockRepository.findAll();
    }
    
    public List<CommonStockEntity> PreferredStockEntityServiceImpl.findCommonStockEntityEntries(int firstResult, int maxResults) {
        return preferredStockRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void PreferredStockEntityServiceImpl.saveCommonStockEntity(CommonStockEntity commonStockEntity) {
        preferredStockRepository.save(commonStockEntity);
    }
    
    public CommonStockEntity PreferredStockEntityServiceImpl.updateCommonStockEntity(CommonStockEntity commonStockEntity) {
        return preferredStockRepository.save(commonStockEntity);
    }
    
}
